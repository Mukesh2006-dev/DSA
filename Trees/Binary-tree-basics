#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

struct Node {
    int data;
    struct Node *left, *right;
};

struct Queue {
    struct Node *nodes[SIZE];
    int front, rear;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

void initQueue(struct Queue *q) {
    q->front = q->rear = -1;
}

int isEmpty(struct Queue *q) {
    return (q->front == -1 || q->front > q->rear);
}

void enqueue(struct Queue *q, struct Node* node) {
    if (q->rear == SIZE - 1) {
        printf("Queue is full\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->rear++;
    q->nodes[q->rear] = node;
}

struct Node* dequeue(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return NULL;
    }
    struct Node* temp = q->nodes[q->front];
    q->front++;
    return temp;
}

void insert(struct Node **root, int data) {
    struct Node* newNode = createNode(data);
    if (!*root) {
        *root = newNode;
        return;
    }

    struct Queue q;
    initQueue(&q);
    enqueue(&q, *root);

    while (!isEmpty(&q)) {
        struct Node* temp = dequeue(&q);

        if (!temp->left) {
            temp->left = newNode;
            break;
        } else {
            enqueue(&q, temp->left);
        }

        if (!temp->right) {
            temp->right = newNode;
            break;
        } else {
            enqueue(&q, temp->right);
        }
    }
}

int main() {
    struct Node* root = NULL;
    insert(&root, 10);
    insert(&root, 20);
    insert(&root, 30);
    insert(&root, 40);
    insert(&root, 50);
    insert(&root, 60);

    printf("Binary tree created successfully!\n");
    return 0;
}
