#include <stdio.h>
#include <stdlib.h>
 struct Node{
     int data;
     struct Node*next;
 };
    void SortedInsert(struct Node **H,int x){
        struct Node*t,*q,*p=*H;
        t=(struct Node*)malloc(sizeof(struct Node));
        t->data=x;
        t->next=NULL;
        if(*H==NULL){
            *H=t;
        }
        else{
            while(p && p->data<x){
                q=p;
                p=p->next;
            }
            if(p==*H){
                t->next=*H;
                *H=t;
            }
            else{
                t->next=q->next;
                q->next=t;
            }
        }
    }
    int hash(int key){
        return key%10;
    }
    void insert(struct Node *H[],int key){
        int index=hash(key);
        SortedInsert(&H[index],key);
    }
    struct Node* Search(struct Node* p, int key) {
    while (p != NULL) {
        if (p->data == key)
            return p;
        p = p->next;
    }
    return NULL;
}
void display(struct Node *t) {
    while (t != NULL) {
        printf("%d -> ", t->data);
        t = t->next;
    }
}
    int main(){
        struct Node *HT[10];
        struct Node*temp;
        int i;
        for(int i=0;i<10;i++){
            HT[i]=NULL;
        }
        insert(HT,12);
        insert(HT,22);
        insert(HT,32);
        insert(HT,11);
        insert(HT,21);
        insert(HT,31);
        insert(HT,13);
        insert(HT,23);
        insert(HT,33);
        for (int i = 0; i < 10; i++) {
        printf("HT[%d]: ", i);
        display(HT[i]);
        printf("NULL\n");
    }

      temp = Search(HT[hash(22)], 22);
       if (temp != NULL)
         printf("Found: %d\n", temp->data);
       else
          printf("Not Found\n");

        return 0;
    }
