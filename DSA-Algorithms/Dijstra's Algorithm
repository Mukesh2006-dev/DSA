#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define V 5

int minDistance(int dist[],bool visited[]){
  int min=INT_MAX,min_index=-1;
  for(int v=0;v<=V;v++){
    if(!visited[v] && dist[v]<min){
      min=dist[v];
      min_index=v;
    }
  }
  return min_index;
}

void printSolution(int dist[]){
  printf("Vertex\tDistance from Source\n");
  for(int i=1;i<=V;i++){
    printf("%d\t=\t%d\n",i,dist[i]);
  }
}

void dijkstra(int graph[V+1][V+1],int src){
  int dist[V+1];
  bool visited[V+1];
  for(int i=1;i<=V;i++){
    dist[i]=INT_MAX;
    visited[i]=false;
  }
  dist[src]=0;
  for(int count=1;count<=V;count++){
    int u=minDistance(dist,visited);
    visited[u]=true;
    
    for(int v=1;v<=V;v++){
      if(!visited[v] && graph[u][v]!=0 && dist[u]!=INT_MAX && dist[u]+graph[u][v]<dist[v]){
        dist[v]=dist[u]+graph[u][v];
      }
    }
  }
  printSolution(dist);
}
int main(){
  int graph[V + 1][V + 1] = {
        {0, 0, 0, 0, 0, 0},         
        {0, 0, 10, 0, 5, 0},        
        {0, 0, 0, 1, 2, 0},         
        {0, 0, 0, 0, 0, 4},         
        {0, 0, 3, 9, 0, 2},         
        {0, 7, 0, 6, 0, 0}          
    };
    int source=1;
    dijkstra(graph,source);
    
    return 0;
}
